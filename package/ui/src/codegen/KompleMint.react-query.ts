/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  Binary,
  InstantiateMsg,
  ExecuteMsg,
  Timestamp,
  Uint64,
  Collections,
  Metadata,
  Uint128,
  CollectionConfig,
  CollectionInfo,
  CollectionFundInfo,
  MetadataInfo,
  TokenInfo,
  MintMsg,
  Cw20ReceiveMsg,
  QueryMsg,
  MigrateMsg,
  ResponseWrapperForString,
  ResponseWrapperForCollectionInfo,
  ResponseWrapperForArrayOfCollectionsResponse,
  CollectionsResponse,
  Addr,
  ResponseWrapperForConfig,
  Config,
  ResponseWrapperForArrayOfString,
  ResponseWrapperForArrayOfUint32,
  ResponseWrapperForBoolean,
} from "./KompleMint.types";
import { KompleMintQueryClient, KompleMintClient } from "./KompleMint.client";
export const kompleMintQueryKeys = {
  contract: [
    {
      contract: "kompleMint",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...kompleMintQueryKeys.contract[0], address: contractAddress }] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  collectionAddress: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "collection_address",
        args,
      },
    ] as const,
  collectionInfo: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "collection_info",
        args,
      },
    ] as const,
  operators: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "operators",
        args,
      },
    ] as const,
  linkedCollections: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "linked_collections",
        args,
      },
    ] as const,
  collections: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "collections",
        args,
      },
    ] as const,
  creators: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "creators",
        args,
      },
    ] as const,
  mintLock: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kompleMintQueryKeys.address(contractAddress)[0],
        method: "mint_lock",
        args,
      },
    ] as const,
};
export const kompleMintQueries = {
  config: <TData = ResponseWrapperForConfig>({
    client,
    options,
  }: KompleMintConfigQuery<TData>): UseQueryOptions<
    ResponseWrapperForConfig,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.config(client?.contractAddress),
    queryFn: () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  collectionAddress: <TData = ResponseWrapperForString>({
    client,
    args,
    options,
  }: KompleMintCollectionAddressQuery<TData>): UseQueryOptions<
    ResponseWrapperForString,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.collectionAddress(
      client?.contractAddress,
      args,
    ),
    queryFn: () =>
      client
        ? client.collectionAddress({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  collectionInfo: <TData = ResponseWrapperForCollectionInfo>({
    client,
    args,
    options,
  }: KompleMintCollectionInfoQuery<TData>): UseQueryOptions<
    ResponseWrapperForCollectionInfo,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.collectionInfo(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.collectionInfo({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  operators: <TData = ResponseWrapperForArrayOfString>({
    client,
    options,
  }: KompleMintOperatorsQuery<TData>): UseQueryOptions<
    ResponseWrapperForArrayOfString,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.operators(client?.contractAddress),
    queryFn: () =>
      client ? client.operators() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  linkedCollections: <TData = ResponseWrapperForArrayOfUint32>({
    client,
    args,
    options,
  }: KompleMintLinkedCollectionsQuery<TData>): UseQueryOptions<
    ResponseWrapperForArrayOfUint32,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.linkedCollections(
      client?.contractAddress,
      args,
    ),
    queryFn: () =>
      client
        ? client.linkedCollections({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  collections: <TData = ResponseWrapperForArrayOfCollectionsResponse>({
    client,
    args,
    options,
  }: KompleMintCollectionsQuery<TData>): UseQueryOptions<
    ResponseWrapperForArrayOfCollectionsResponse,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.collections(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.collections({
            blacklist: args.blacklist,
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  creators: <TData = ResponseWrapperForArrayOfString>({
    client,
    options,
  }: KompleMintCreatorsQuery<TData>): UseQueryOptions<
    ResponseWrapperForArrayOfString,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.creators(client?.contractAddress),
    queryFn: () =>
      client ? client.creators() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  mintLock: <TData = ResponseWrapperForBoolean>({
    client,
    args,
    options,
  }: KompleMintMintLockQuery<TData>): UseQueryOptions<
    ResponseWrapperForBoolean,
    Error,
    TData
  > => ({
    queryKey: kompleMintQueryKeys.mintLock(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.mintLock({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
};
export interface KompleMintReactQuery<TResponse, TData = TResponse> {
  client: KompleMintQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface KompleMintMintLockQuery<TData>
  extends KompleMintReactQuery<ResponseWrapperForBoolean, TData> {
  args: {
    collectionId: number;
  };
}
export function useKompleMintMintLockQuery<TData = ResponseWrapperForBoolean>({
  client,
  args,
  options,
}: KompleMintMintLockQuery<TData>) {
  return useQuery<ResponseWrapperForBoolean, Error, TData>(
    kompleMintQueryKeys.mintLock(client?.contractAddress, args),
    () =>
      client
        ? client.mintLock({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export type KompleMintCreatorsQuery<TData> = KompleMintReactQuery<
  ResponseWrapperForArrayOfString,
  TData
>;
export function useKompleMintCreatorsQuery<
  TData = ResponseWrapperForArrayOfString,
>({ client, options }: KompleMintCreatorsQuery<TData>) {
  return useQuery<ResponseWrapperForArrayOfString, Error, TData>(
    kompleMintQueryKeys.creators(client?.contractAddress),
    () =>
      client ? client.creators() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KompleMintCollectionsQuery<TData>
  extends KompleMintReactQuery<
    ResponseWrapperForArrayOfCollectionsResponse,
    TData
  > {
  args: {
    blacklist: boolean;
    limit?: number;
    startAfter?: number;
  };
}
export function useKompleMintCollectionsQuery<
  TData = ResponseWrapperForArrayOfCollectionsResponse,
>({ client, args, options }: KompleMintCollectionsQuery<TData>) {
  return useQuery<ResponseWrapperForArrayOfCollectionsResponse, Error, TData>(
    kompleMintQueryKeys.collections(client?.contractAddress, args),
    () =>
      client
        ? client.collections({
            blacklist: args.blacklist,
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KompleMintLinkedCollectionsQuery<TData>
  extends KompleMintReactQuery<ResponseWrapperForArrayOfUint32, TData> {
  args: {
    collectionId: number;
  };
}
export function useKompleMintLinkedCollectionsQuery<
  TData = ResponseWrapperForArrayOfUint32,
>({ client, args, options }: KompleMintLinkedCollectionsQuery<TData>) {
  return useQuery<ResponseWrapperForArrayOfUint32, Error, TData>(
    kompleMintQueryKeys.linkedCollections(client?.contractAddress, args),
    () =>
      client
        ? client.linkedCollections({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export type KompleMintOperatorsQuery<TData> = KompleMintReactQuery<
  ResponseWrapperForArrayOfString,
  TData
>;
export function useKompleMintOperatorsQuery<
  TData = ResponseWrapperForArrayOfString,
>({ client, options }: KompleMintOperatorsQuery<TData>) {
  return useQuery<ResponseWrapperForArrayOfString, Error, TData>(
    kompleMintQueryKeys.operators(client?.contractAddress),
    () =>
      client ? client.operators() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KompleMintCollectionInfoQuery<TData>
  extends KompleMintReactQuery<ResponseWrapperForCollectionInfo, TData> {
  args: {
    collectionId: number;
  };
}
export function useKompleMintCollectionInfoQuery<
  TData = ResponseWrapperForCollectionInfo,
>({ client, args, options }: KompleMintCollectionInfoQuery<TData>) {
  return useQuery<ResponseWrapperForCollectionInfo, Error, TData>(
    kompleMintQueryKeys.collectionInfo(client?.contractAddress, args),
    () =>
      client
        ? client.collectionInfo({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KompleMintCollectionAddressQuery<TData>
  extends KompleMintReactQuery<ResponseWrapperForString, TData> {
  args: {
    collectionId: number;
  };
}
export function useKompleMintCollectionAddressQuery<
  TData = ResponseWrapperForString,
>({ client, args, options }: KompleMintCollectionAddressQuery<TData>) {
  return useQuery<ResponseWrapperForString, Error, TData>(
    kompleMintQueryKeys.collectionAddress(client?.contractAddress, args),
    () =>
      client
        ? client.collectionAddress({
            collectionId: args.collectionId,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export type KompleMintConfigQuery<TData> = KompleMintReactQuery<
  ResponseWrapperForConfig,
  TData
>;
export function useKompleMintConfigQuery<TData = ResponseWrapperForConfig>({
  client,
  options,
}: KompleMintConfigQuery<TData>) {
  return useQuery<ResponseWrapperForConfig, Error, TData>(
    kompleMintQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KompleMintReceiveMutation {
  client: KompleMintClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintReceiveMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintReceiveMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintReceiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.receive(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdateCreatorsMutation {
  client: KompleMintClient;
  msg: {
    addrs: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdateCreatorsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintUpdateCreatorsMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintUpdateCreatorsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateCreators(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintLockExecuteMutation {
  client: KompleMintClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintLockExecuteMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintLockExecuteMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintLockExecuteMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.lockExecute(fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdateCollectionStatusMutation {
  client: KompleMintClient;
  msg: {
    collectionId: number;
    isBlacklist: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdateCollectionStatusMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      KompleMintUpdateCollectionStatusMutation
    >,
    "mutationFn"
  >,
) {
  return useMutation<
    ExecuteResult,
    Error,
    KompleMintUpdateCollectionStatusMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateCollectionStatus(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdateLinkedCollectionsMutation {
  client: KompleMintClient;
  msg: {
    collectionId: number;
    linkedCollections: number[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdateLinkedCollectionsMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      KompleMintUpdateLinkedCollectionsMutation
    >,
    "mutationFn"
  >,
) {
  return useMutation<
    ExecuteResult,
    Error,
    KompleMintUpdateLinkedCollectionsMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateLinkedCollections(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdateOperatorsMutation {
  client: KompleMintClient;
  msg: {
    addrs: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdateOperatorsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintUpdateOperatorsMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintUpdateOperatorsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateOperators(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintPermissionMintMutation {
  client: KompleMintClient;
  msg: {
    mintMsg: MintMsg;
    permissionMsg: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintPermissionMintMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintPermissionMintMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintPermissionMintMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.permissionMint(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintAdminMintMutation {
  client: KompleMintClient;
  msg: {
    collectionId: number;
    metadataId?: number;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintAdminMintMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintAdminMintMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintAdminMintMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.adminMint(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintMintMutation {
  client: KompleMintClient;
  msg: {
    collectionId: number;
    metadataId?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintMintMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KompleMintMintMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintMintMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.mint(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdateCollectionMintLockMutation {
  client: KompleMintClient;
  msg: {
    collectionId: number;
    lock: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdateCollectionMintLockMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      KompleMintUpdateCollectionMintLockMutation
    >,
    "mutationFn"
  >,
) {
  return useMutation<
    ExecuteResult,
    Error,
    KompleMintUpdateCollectionMintLockMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateCollectionMintLock(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintUpdatePublicCollectionCreationMutation {
  client: KompleMintClient;
  msg: {
    publicCollectionCreation: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintUpdatePublicCollectionCreationMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      KompleMintUpdatePublicCollectionCreationMutation
    >,
    "mutationFn"
  >,
) {
  return useMutation<
    ExecuteResult,
    Error,
    KompleMintUpdatePublicCollectionCreationMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updatePublicCollectionCreation(msg, fee, memo, funds),
    options,
  );
}
export interface KompleMintCreateCollectionMutation {
  client: KompleMintClient;
  msg: {
    codeId: number;
    collectionConfig: CollectionConfig;
    collectionInfo: CollectionInfo;
    fundInfo: CollectionFundInfo;
    linkedCollections?: number[];
    metadataInfo: MetadataInfo;
    tokenInfo: TokenInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKompleMintCreateCollectionMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      KompleMintCreateCollectionMutation
    >,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KompleMintCreateCollectionMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createCollection(msg, fee, memo, funds),
    options,
  );
}
